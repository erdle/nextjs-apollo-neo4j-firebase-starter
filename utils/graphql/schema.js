import { makeAugmentedSchema} from 'neo4j-graphql-js'
import { typeDefs } from './typeDefs'
import { SchemaDirectiveVisitor } from 'graphql-tools'
import { AuthorizationError } from './errors'
import verifyIdToken from '../auth/verifyIdToken'
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
dayjs.extend(utc)

// const resolvers = {
// 	Mutation: {
// 		CreateUser: (obj, params, ctx, resolveInfo) => {
// 			const givenName = params.givenName
// 			const familyName = params.familyName
// 			const username = (givenName + familyName).trim().replace(/\s/g, '').toLowerCase()
// 			console.log('resolver username: ' + username)
// 			params.username = username
// 			return neo4jgraphql(obj, params, ctx, resolveInfo)
// 		}
// 		// DeleteUser resolver needs to remove user from Firebase Auth as well
// 	}
// }

const verifyAndDecodeToken = ({context}) => {

	if (!context || !context.headers || !context.headers.authorization) {
		throw new AuthorizationError({ 
			message: "No authorization token" 
		})
	}
	const token = context.headers.authorization || context.headers.Authorization
	const idToken = token.replace('Bearer ', '')
	
	return verifyIdToken(idToken)
		.then(decodedToken => {
			return decodedToken
		})
		.catch(error => {
			console.log(error)
			throw new AuthorizationError({
				message: "You are not authorized for this resource"
			});
		})
}

// Define schema directives for auth
class IsAuthenticatedDirective extends SchemaDirectiveVisitor {

	visitFieldDefinition(field) {
		const next = field.resolve;
		field.resolve = async function(result, args, context, info) {
			try {
				console.log('Running verifyAndDecodeToken (visitFieldDefinition)...')
				await verifyAndDecodeToken({ context });
				return next(result, args, context, info);
			} catch (error) {
				throw new AuthorizationError({
					message: "You are not authorized for this resource - visitFieldDefinition"
				});
			}
		}
	}

	visitObject(obj) {
		const fields = obj.getFields();
		Object.keys(fields).forEach(fieldName => {
			const field = fields[fieldName];
			const next = field.resolve;

			field.resolve = async function(result, args, context, info) {
				try {
					console.log('Running verifyAndDecodeToken (visitObject)...')
					await verifyAndDecodeToken({ context });
					return next(result, args, context, info);
				} catch (error) {
					throw new AuthorizationError({
						message: "You are not authorized for this resource - visitObject"
					});
				}
			}
		});
	}

}

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */
export const augmentedSchema = makeAugmentedSchema({
	typeDefs,
	// resolvers,
	schemaDirectives: {
		isAuthenticated: IsAuthenticatedDirective
	},
	config: {
    // query: {
    //   exclude: ["MyCustomPayload"]
    // },
    // mutation: {
    //   exclude: ["User"]
    // }
  }
})